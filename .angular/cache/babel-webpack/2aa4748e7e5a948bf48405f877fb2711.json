{"ast":null,"code":"import { catchError, tap } from \"rxjs/operators\";\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.USER_DATA_STORAGE_KEY = 'authenticatedUserData';\n      this.authUrl = 'api/auth';\n      this.authenticatedUserSubject = new BehaviorSubject(null);\n    }\n\n    ngOnInit() {}\n\n    signUp(user, password) {\n      return this.http.post(this.authUrl + '/signup', {\n        firstName: user.firstName,\n        lastName: user.lastName,\n        email: user.email,\n        password: password\n      }).pipe(catchError(this.handleError));\n    }\n\n    login(email, password) {\n      return this.http.post(this.authUrl + '/login', {\n        email: email,\n        password: password\n      }).pipe(catchError(this.handleError), tap(responseData => {\n        responseData.token = {\n          token: responseData.token.token,\n          type: responseData.token.type,\n          expirationDate: new Date(responseData.token.expirationDate)\n        };\n        this.handleAuthentication(responseData);\n      }));\n    }\n\n    handleError(errorRes) {\n      let errorMessage = 'An unknow error has occured!';\n\n      if (errorRes.error && errorRes.error.message) {\n        errorMessage = errorRes.error.message;\n      }\n\n      return throwError(() => new Error(errorMessage));\n    }\n\n    handleAuthentication(authenticatedUser) {\n      this.authenticatedUserSubject.next(authenticatedUser);\n      const expirationDuration = authenticatedUser.token.expirationDate.getTime() - new Date().getTime();\n      this.autoLogout(expirationDuration);\n      localStorage.setItem(this.USER_DATA_STORAGE_KEY, JSON.stringify(authenticatedUser));\n    }\n\n    logout() {\n      this.authenticatedUserSubject.next(null);\n      this.router.navigate(['/login']);\n      localStorage.removeItem(this.USER_DATA_STORAGE_KEY);\n\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n\n      this.tokenExpirationTimer = null;\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem(this.USER_DATA_STORAGE_KEY));\n\n      if (!userData) {\n        return;\n      }\n\n      userData.token.expirationDate = new Date(userData.token.expirationDate);\n\n      if (this.isValidToken(userData.token)) {\n        this.authenticatedUserSubject.next(userData);\n        const expirationDuration = userData.token.expirationDate.getTime() - new Date().getTime();\n        this.autoLogout(expirationDuration);\n      }\n    }\n\n    autoLogout(expirationDate) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logout();\n      }, expirationDate);\n    }\n\n    isValidToken(jwtToken) {\n      if (!jwtToken) {\n        return false;\n      }\n\n      return jwtToken.token && jwtToken.expirationDate > new Date();\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}