{"ast":null,"code":"export class ImageUtils {\n  constructor(element) {\n    this.cellStack = [];\n    this.element = element;\n  }\n\n  getImages() {\n    return this.cellStack.filter(this.filter);\n  }\n\n  filter(cell) {\n    return cell.img !== undefined;\n  }\n\n}\nexport class Cells {\n  constructor(carouselProperties, utils) {\n    this.carouselProperties = carouselProperties;\n    this.utils = utils;\n    this.counter = 0;\n    this.imageUtils = new ImageUtils(this.element);\n    this.init(carouselProperties);\n  }\n\n  get images() {\n    return this.carouselProperties.images;\n  }\n\n  get cellLength() {\n    return this.cells ? this.cells.length : 0;\n  }\n\n  get fullCellWidth() {\n    return this.carouselProperties.cellWidth + this.carouselProperties.margin;\n  }\n\n  get cellLengthInLightDOMMode() {\n    if (this.images) {\n      let cellLength = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\n\n      if (cellLength > this.images.length) {\n        cellLength = this.images.length;\n      }\n\n      return cellLength;\n    } else {\n      return this.cellLength;\n    }\n  }\n\n  get numberOfVisibleCells() {\n    return this.utils.numberOfVisibleCells;\n  }\n\n  get overflowCellsLimit() {\n    return this.utils.overflowCellsLimit;\n  }\n\n  get isLightDOM() {\n    return this.carouselProperties.lightDOM || this.carouselProperties.loop;\n  }\n\n  updateProperties(carouselProperties) {\n    this.carouselProperties = carouselProperties;\n  }\n\n  lineUp() {\n    const cells = this.element ? this.element.children : [];\n    this.imageUtils.cellStack = [];\n\n    for (var i = 0; i < cells.length; i++) {\n      let cell = cells[i];\n      let positionX = this.getCellPositionInContainer(i);\n      cell.style.transform = 'translateX(' + positionX + 'px)';\n      cell.style.width = this.carouselProperties.cellWidth + 'px';\n\n      if (this.getImage(i)) {\n        this.imageUtils.cellStack.push({\n          index: i,\n          positionX,\n          img: this.getImage(i)['image']\n        });\n      }\n    }\n\n    ;\n  }\n\n  ifSequenceOfCellsIsChanged() {\n    const cells = this.element.children;\n    return cells[0]['style'].transform !== 'translateX(0px)';\n  }\n\n  getCellPositionInContainer(cellIndexInDOMTree) {\n    let positionIndex = this.getCellIndexInContainer(cellIndexInDOMTree);\n    return positionIndex * this.fullCellWidth;\n  }\n\n  getCellIndexInContainer(cellIndexInDOMTree) {\n    let positionIndex;\n\n    if (!this.isLightDOM) {\n      return cellIndexInDOMTree;\n    }\n\n    let cellLength = this.cellLengthInLightDOMMode;\n    let counter = this.counter - this.overflowCellsLimit;\n\n    if (counter > cellLength) {\n      counter = counter % cellLength;\n    }\n\n    if (counter < 0) {\n      return cellIndexInDOMTree;\n    } else {\n      positionIndex = cellIndexInDOMTree - counter;\n\n      if (positionIndex < 0) {\n        positionIndex = cellLength + positionIndex;\n      }\n    }\n\n    return positionIndex;\n  }\n\n  getImage(cellIndex) {\n    if (!this.images) {\n      return;\n    }\n\n    let imageIndex = this.getImageIndex(cellIndex);\n    let file = this.images[imageIndex];\n\n    if (file && !file.type) {\n      file.type = 'image';\n    }\n\n    return {\n      image: this.images[imageIndex],\n      imageIndex\n    };\n  }\n\n  getImageIndex(cellIndexInDOMTree) {\n    const positionIndex = this.getCellIndexInContainer(cellIndexInDOMTree);\n    let imageIndex;\n\n    if (this.counter > this.overflowCellsLimit) {\n      let cellLimitOverflow = this.counter - this.overflowCellsLimit;\n      imageIndex = positionIndex + cellLimitOverflow;\n\n      if (this.images && this.carouselProperties.loop) {\n        imageIndex = imageIndex % this.images.length;\n      }\n    } else {\n      imageIndex = cellIndexInDOMTree;\n    }\n\n    return imageIndex;\n  }\n\n  setCounter(value) {\n    this.counter = value;\n  }\n\n  init(carouselProperties) {\n    this.element = this.carouselProperties.cellsElement;\n    this.cells = this.element.children;\n    this.visibleWidth = this.carouselProperties.visibleWidth || this.element.parentElement.clientWidth;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}