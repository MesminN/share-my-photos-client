{"ast":null,"code":"export class Carousel {\n  constructor(properties, utils, cells, container, slide) {\n    this.properties = properties;\n    this.utils = utils;\n    this.cells = cells;\n    this.container = container;\n    this.slide = slide;\n    /* The slide length has been limited by the limitSlideLength() method */\n\n    this.isSlideLengthLimited = false;\n    this.isContentImages = true;\n    this.isLazyLoad = true;\n    this.isContainerLocked = true;\n    this.alignCells = \"left\";\n    this.initialContainerPosition = 0;\n    this.containerPullLimit = 100;\n\n    this.handleTouchstart = event => {\n      this.container.handleTouchstart();\n      this.slide.handleTouchstart(event);\n    };\n\n    this.handleHorizontalSwipe = event => {\n      this.container.handleHorizontalSwipe();\n    };\n\n    this.handleTouchend = event => {\n      if (this.properties.freeScroll) {\n        this.container.handleTouchend();\n      } else {\n        this.container.handleTouchend(true);\n        this.slide.handleTouchend(event);\n      }\n    };\n\n    this.isNextArrowDisabled = () => {\n      return this.slide.isNextArrowDisabled();\n    };\n\n    this.isPrevArrowDisabled = () => {\n      return this.slide.isPrevArrowDisabled();\n    };\n\n    this.init();\n  }\n\n  get cellLength() {\n    return this.cells.cellLength;\n  }\n\n  get cellLengthInLightDOMMode() {\n    if (this.images) {\n      let cellLength = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\n\n      if (cellLength > this.images.length) {\n        cellLength = this.images.length;\n      }\n\n      return cellLength;\n    } else {\n      return this.cellLength;\n    }\n  }\n\n  get lastCellIndex() {\n    return this.images.length ? this.images.length - 1 : this.cells.cellLength - 1;\n  }\n\n  get overflowCellsLimit() {\n    return this.utils.overflowCellsLimit;\n  }\n\n  get cellLimit() {\n    if (this.isLightDOM) {\n      let cellLimit = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\n\n      if (cellLimit < this.numberOfVisibleCells) {\n        cellLimit = this.numberOfVisibleCells;\n      }\n\n      return cellLimit;\n    } else {\n      return this.properties.images.length;\n    }\n  }\n\n  get isLightDOM() {\n    return this.properties.lightDOM || this.properties.loop;\n  }\n\n  get images() {\n    return this.properties.images;\n  }\n\n  get margin() {\n    return this.properties.margin;\n  }\n\n  get minSwipeDistance() {\n    return this.properties.minSwipeDistance;\n  }\n\n  get transitionDuration() {\n    return this.properties.transitionDuration;\n  }\n\n  get transitionTimingFunction() {\n    return this.properties.transitionTimingFunction;\n  }\n\n  get fullCellWidth() {\n    return this.properties.cellWidth + this.margin;\n  }\n\n  get numberOfVisibleCells() {\n    return this.utils.numberOfVisibleCells;\n  }\n\n  get lapCounter() {\n    return Math.floor(this.slide.counter / this.cellLengthInLightDOMMode);\n  }\n\n  get slideCounter() {\n    return this.slide.counter;\n  }\n\n  updateProperties(properties) {\n    this.properties = properties;\n  }\n\n  init() {\n    this.cellsElement = this.properties.cellsElement;\n    this.visibleWidth = this.properties.visibleWidth || this.cellsElement.parentElement.clientWidth;\n  }\n\n  destroy() {\n    clearInterval(this.autoplayId);\n  }\n\n  lineUpCells() {\n    this.cells.lineUp();\n  }\n\n  handleTransitionend() {\n    this.slide.handleTransitionend();\n  }\n\n  getImage(index) {\n    return this.cells.getImage(index);\n  }\n\n  next(length = 1) {\n    if (!this.isNextArrowDisabled()) {\n      this.slide.next(length);\n    }\n  }\n\n  prev(length = 1) {\n    this.slide.prev(length);\n  }\n\n  autoplay() {\n    this.autoplayId = setInterval(() => {\n      this.next();\n    }, this.properties.autoplayInterval);\n  }\n\n  stopAutoplay() {\n    if (this.autoplayId) {\n      clearInterval(this.autoplayId);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}