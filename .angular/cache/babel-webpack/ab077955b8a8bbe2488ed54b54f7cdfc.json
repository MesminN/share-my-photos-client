{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"canvas\"];\nexport let ColorPaletteComponent = /*#__PURE__*/(() => {\n  class ColorPaletteComponent {\n    constructor() {\n      this.color = new EventEmitter(true);\n      this.mousedown = false;\n    }\n\n    ngAfterViewInit() {\n      this.draw();\n    }\n\n    draw() {\n      if (!this.ctx) {\n        this.ctx = this.canvas.nativeElement.getContext('2d');\n      }\n\n      const width = this.canvas.nativeElement.width;\n      const height = this.canvas.nativeElement.height;\n      this.ctx.fillStyle = this.hue || 'rgba(255,255,255,1)';\n      this.ctx.fillRect(0, 0, width, height);\n      const whiteGrad = this.ctx.createLinearGradient(0, 0, width, 0);\n      whiteGrad.addColorStop(0, 'rgba(255,255,255,1)');\n      whiteGrad.addColorStop(1, 'rgba(255,255,255,0)');\n      this.ctx.fillStyle = whiteGrad;\n      this.ctx.fillRect(0, 0, width, height);\n      const blackGrad = this.ctx.createLinearGradient(0, 0, 0, height);\n      blackGrad.addColorStop(0, 'rgba(0,0,0,0)');\n      blackGrad.addColorStop(1, 'rgba(0,0,0,1)');\n      this.ctx.fillStyle = blackGrad;\n      this.ctx.fillRect(0, 0, width, height);\n\n      if (this.selectedPosition) {\n        this.ctx.strokeStyle = 'white';\n        this.ctx.fillStyle = 'white';\n        this.ctx.beginPath();\n        this.ctx.arc(this.selectedPosition.x, this.selectedPosition.y, 10, 0, 2 * Math.PI);\n        this.ctx.lineWidth = 5;\n        this.ctx.stroke();\n      }\n    }\n\n    ngOnChanges(changes) {\n      if (changes['hue']) {\n        this.draw();\n        const pos = this.selectedPosition;\n\n        if (pos) {\n          this.color.emit(this.getColorAtPosition(pos.x, pos.y));\n        }\n      }\n    }\n\n    onMouseUp(evt) {\n      this.mousedown = false;\n    }\n\n    onMouseDown(evt) {\n      this.mousedown = true;\n      this.selectedPosition = {\n        x: evt.offsetX,\n        y: evt.offsetY\n      };\n      this.draw();\n      this.color.emit(this.getColorAtPosition(evt.offsetX, evt.offsetY));\n    }\n\n    onMouseMove(evt) {\n      if (this.mousedown) {\n        this.selectedPosition = {\n          x: evt.offsetX,\n          y: evt.offsetY\n        };\n        this.draw();\n        this.emitColor(evt.offsetX, evt.offsetY);\n      }\n    }\n\n    emitColor(x, y) {\n      const rgbaColor = this.getColorAtPosition(x, y);\n      this.color.emit(rgbaColor);\n    }\n\n    getColorAtPosition(x, y) {\n      const imageData = this.ctx.getImageData(x, y, 1, 1).data;\n      return 'rgba(' + imageData[0] + ',' + imageData[1] + ',' + imageData[2] + ',1)';\n    }\n\n  }\n\n  ColorPaletteComponent.ɵfac = function ColorPaletteComponent_Factory(t) {\n    return new (t || ColorPaletteComponent)();\n  };\n\n  ColorPaletteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ColorPaletteComponent,\n    selectors: [[\"app-color-palette\"]],\n    viewQuery: function ColorPaletteComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n      }\n    },\n    hostBindings: function ColorPaletteComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mouseup\", function ColorPaletteComponent_mouseup_HostBindingHandler($event) {\n          return ctx.onMouseUp($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      hue: \"hue\"\n    },\n    outputs: {\n      color: \"color\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"width\", \"250\", \"height\", \"250\", 1, \"color-palette\", 3, \"mousedown\", \"mousemove\"], [\"canvas\", \"\"]],\n    template: function ColorPaletteComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"canvas\", 0, 1);\n        i0.ɵɵlistener(\"mousedown\", function ColorPaletteComponent_Template_canvas_mousedown_0_listener($event) {\n          return ctx.onMouseDown($event);\n        })(\"mousemove\", function ColorPaletteComponent_Template_canvas_mousemove_0_listener($event) {\n          return ctx.onMouseMove($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".color-palette[_ngcontent-%COMP%]:hover{cursor:pointer}[_nghost-%COMP%]{width:250px;height:250px;display:block}\"]\n  });\n  return ColorPaletteComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}