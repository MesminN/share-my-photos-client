{"ast":null,"code":"export class Touches {\n  constructor(properties) {\n    this.eventType = undefined;\n    this.handlers = {};\n    this.startX = 0;\n    this.startY = 0;\n    this.lastTap = 0;\n    this.doubleTapMinTimeout = 300;\n    this.tapMinTimeout = 200;\n    this.touchstartTime = 0;\n    this.i = 0;\n    this.isMousedown = false;\n    this._touchListeners = {\n      \"touchstart\": \"handleTouchstart\",\n      \"touchmove\": \"handleTouchmove\",\n      \"touchend\": \"handleTouchend\"\n    };\n    this._mouseListeners = {\n      \"mousedown\": \"handleMousedown\",\n      \"mousemove\": \"handleMousemove\",\n      \"mouseup\": \"handleMouseup\",\n      \"wheel\": \"handleWheel\"\n    };\n    this._otherListeners = {\n      \"resize\": \"handleResize\"\n    };\n    /*\r\n     * Listeners\r\n     */\n\n    /* Touchstart */\n\n    this.handleTouchstart = event => {\n      this.elementPosition = this.getElementPosition();\n      this.touchstartTime = new Date().getTime();\n\n      if (this.eventType === undefined) {\n        this.getTouchstartPosition(event);\n      }\n\n      this.runHandler(\"touchstart\", event);\n    };\n    /* Touchmove */\n\n\n    this.handleTouchmove = event => {\n      const touches = event.touches; // Pan\n\n      if (this.detectPan(touches)) {\n        this.runHandler(\"pan\", event);\n      } // Pinch\n\n\n      if (this.detectPinch(event)) {\n        this.runHandler(\"pinch\", event);\n      } // Linear swipe\n\n\n      switch (this.detectLinearSwipe(event)) {\n        case \"horizontal-swipe\":\n          event.swipeType = \"horizontal-swipe\";\n          this.runHandler(\"horizontal-swipe\", event);\n          break;\n\n        case \"vertical-swipe\":\n          event.swipeType = \"vertical-swipe\";\n          this.runHandler(\"vertical-swipe\", event);\n          break;\n      } // Linear swipe\n\n\n      if (this.detectLinearSwipe(event) || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\n        this.handleLinearSwipe(event);\n      }\n    };\n    /* Touchend */\n\n\n    this.handleTouchend = event => {\n      const touches = event.touches; // Double Tap\n\n      if (this.detectDoubleTap()) {\n        this.runHandler(\"double-tap\", event);\n      } // Tap\n\n\n      this.detectTap();\n      this.runHandler(\"touchend\", event);\n      this.eventType = 'touchend';\n\n      if (touches && touches.length === 0) {\n        this.eventType = undefined;\n        this.i = 0;\n      }\n    };\n    /* Mousedown */\n\n\n    this.handleMousedown = event => {\n      this.isMousedown = true;\n      this.elementPosition = this.getElementPosition();\n      this.touchstartTime = new Date().getTime();\n\n      if (this.eventType === undefined) {\n        this.getMousedownPosition(event);\n      }\n\n      this.runHandler(\"mousedown\", event);\n    };\n    /* Mousemove */\n\n\n    this.handleMousemove = event => {\n      //event.preventDefault();\n      if (!this.isMousedown) {\n        return;\n      } // Pan\n\n\n      this.runHandler(\"pan\", event); // Linear swipe\n\n      switch (this.detectLinearSwipe(event)) {\n        case \"horizontal-swipe\":\n          event.swipeType = \"horizontal-swipe\";\n          this.runHandler(\"horizontal-swipe\", event);\n          break;\n\n        case \"vertical-swipe\":\n          event.swipeType = \"vertical-swipe\";\n          this.runHandler(\"vertical-swipe\", event);\n          break;\n      } // Linear swipe\n\n\n      if (this.detectLinearSwipe(event) || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\n        this.handleLinearSwipe(event);\n      }\n    };\n    /* Mouseup */\n\n\n    this.handleMouseup = event => {\n      // Tap\n      this.detectTap();\n      this.isMousedown = false;\n      this.runHandler(\"mouseup\", event);\n      this.eventType = undefined;\n      this.i = 0;\n    };\n    /* Wheel */\n\n\n    this.handleWheel = event => {\n      this.runHandler(\"wheel\", event);\n    };\n    /* Resize */\n\n\n    this.handleResize = event => {\n      this.runHandler(\"resize\", event);\n    };\n\n    this.properties = properties;\n    this.element = this.properties.element;\n    this.elementPosition = this.getElementPosition();\n    this.toggleEventListeners('addEventListener');\n  }\n\n  get touchListeners() {\n    return this.properties.touchListeners ? this.properties.touchListeners : this._touchListeners;\n  }\n\n  get mouseListeners() {\n    return this.properties.mouseListeners ? this.properties.mouseListeners : this._mouseListeners;\n  }\n\n  get otherListeners() {\n    return this.properties.otherListeners ? this.properties.otherListeners : this._otherListeners;\n  }\n\n  destroy() {\n    this.toggleEventListeners('removeEventListener');\n  }\n\n  toggleEventListeners(action) {\n    let listeners;\n\n    if (this.properties.listeners === 'mouse and touch') {\n      listeners = Object.assign(this.touchListeners, this.mouseListeners);\n    } else {\n      listeners = this.detectTouchScreen() ? this.touchListeners : this.mouseListeners;\n    }\n\n    if (this.properties.resize) {\n      listeners = Object.assign(listeners, this.otherListeners);\n    }\n\n    for (var listener in listeners) {\n      const handler = listeners[listener]; // Window\n\n      if (listener === \"resize\") {\n        if (action === 'addEventListener') {\n          window.addEventListener(listener, this[handler], false);\n        }\n\n        if (action === 'removeEventListener') {\n          window.removeEventListener(listener, this[handler], false);\n        } // Document\n\n      } else if (listener === 'mouseup' || listener === \"mousemove\") {\n        if (action === 'addEventListener') {\n          document.addEventListener(listener, this[handler], {\n            passive: false\n          });\n        }\n\n        if (action === 'removeEventListener') {\n          document.removeEventListener(listener, this[handler], false);\n        } // Element\n\n      } else {\n        if (action === 'addEventListener') {\n          this.element.addEventListener(listener, this[handler], false);\n        }\n\n        if (action === 'removeEventListener') {\n          this.element.removeEventListener(listener, this[handler], false);\n        }\n      }\n    }\n  }\n\n  addEventListeners(listener) {\n    const handler = this._mouseListeners[listener];\n    window.addEventListener(listener, this[handler], false);\n  }\n\n  removeEventListeners(listener) {\n    const handler = this._mouseListeners[listener];\n    window.removeEventListener(listener, this[handler], false);\n  }\n\n  handleLinearSwipe(event) {\n    //event.preventDefault();\n    this.i++;\n\n    if (this.i > 3) {\n      this.eventType = this.getLinearSwipeType(event);\n    }\n\n    if (this.eventType === 'horizontal-swipe') {\n      this.runHandler('horizontal-swipe', event);\n    }\n\n    if (this.eventType === 'vertical-swipe') {\n      this.runHandler('vertical-swipe', event);\n    }\n  }\n\n  runHandler(eventName, response) {\n    if (this.handlers[eventName]) {\n      this.handlers[eventName](response);\n    }\n  }\n  /*\r\n   * Detection\r\n   */\n\n\n  detectPan(touches) {\n    return touches.length === 1 && !this.eventType || this.eventType === 'pan';\n  }\n\n  detectDoubleTap() {\n    if (this.eventType != undefined) {\n      return;\n    }\n\n    const currentTime = new Date().getTime();\n    const tapLength = currentTime - this.lastTap;\n    clearTimeout(this.doubleTapTimeout);\n\n    if (tapLength < this.doubleTapMinTimeout && tapLength > 0) {\n      return true;\n    } else {\n      this.doubleTapTimeout = setTimeout(() => {\n        clearTimeout(this.doubleTapTimeout);\n      }, this.doubleTapMinTimeout);\n    }\n\n    this.lastTap = currentTime;\n    return undefined;\n  }\n\n  detectTap() {\n    if (this.eventType != undefined) {\n      return;\n    }\n\n    const currentTime = new Date().getTime();\n    const tapLength = currentTime - this.touchstartTime;\n\n    if (tapLength > 0) {\n      if (tapLength < this.tapMinTimeout) {\n        this.runHandler(\"tap\", event);\n      } else {\n        this.runHandler(\"longtap\", event);\n      }\n    }\n  }\n\n  detectPinch(event) {\n    const touches = event.touches;\n    return touches.length === 2 && this.eventType === undefined || this.eventType === 'pinch';\n  }\n\n  detectLinearSwipe(event) {\n    const touches = event.touches;\n\n    if (touches) {\n      if (touches.length === 1 && !this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\n        return this.getLinearSwipeType(event);\n      }\n    } else {\n      if (!this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\n        return this.getLinearSwipeType(event);\n      }\n    }\n\n    return undefined;\n  }\n\n  getLinearSwipeType(event) {\n    if (this.eventType !== 'horizontal-swipe' && this.eventType !== 'vertical-swipe') {\n      const movementX = Math.abs(this.moveLeft(0, event) - this.startX);\n      const movementY = Math.abs(this.moveTop(0, event) - this.startY);\n\n      if (movementY * 3 > movementX) {\n        return 'vertical-swipe';\n      } else {\n        return 'horizontal-swipe';\n      }\n    } else {\n      return this.eventType;\n    }\n  }\n\n  getElementPosition() {\n    return this.element.getBoundingClientRect();\n  }\n\n  getTouchstartPosition(event) {\n    this.startX = event.touches[0].clientX - this.elementPosition.left;\n    this.startY = event.touches[0].clientY - this.elementPosition.top;\n  }\n\n  getMousedownPosition(event) {\n    this.startX = event.clientX - this.elementPosition.left;\n    this.startY = event.clientY - this.elementPosition.top;\n  }\n\n  moveLeft(index, event) {\n    const touches = event.touches;\n\n    if (touches) {\n      return touches[index].clientX - this.elementPosition.left;\n    } else {\n      return event.clientX - this.elementPosition.left;\n    }\n  }\n\n  moveTop(index, event) {\n    const touches = event.touches;\n\n    if (touches) {\n      return touches[index].clientY - this.elementPosition.top;\n    } else {\n      return event.clientY - this.elementPosition.top;\n    }\n  }\n\n  detectTouchScreen() {\n    var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\n\n    var mq = function (query) {\n      return window.matchMedia(query).matches;\n    };\n\n    if ('ontouchstart' in window) {\n      return true;\n    } // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n    // https://git.io/vznFH\n\n\n    var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\n    return mq(query);\n  }\n  /* Public properties and methods */\n\n\n  on(event, handler) {\n    if (event) {\n      this.handlers[event] = handler;\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}